Time: O(nlogn (sorting) + logn (searching))

class Solution(object): //python
    def hIndex(self, citations):
        citations.sort(reverse = True)

        for i, current in enumerate(citations):
            if i >= current:
                return i
        return len(citations)

class Solution { //brute force C++
public:
    int hIndex(vector<int>& citations) {
        int s = 0;
        int citationsLength = citations.size();
        sort(citations.begin(), citations.end());
        for(int i = 0; i < citationsLength; i++){
            if(citations[i] >= citationsLength - i){
                s = max(s, citationsLength - i);
            }
        }
        return s;
    }
};

class Solution {//Binary Search Java
    public int hIndex(int[] citations) {
        int low = 0;
        int high = citations.length;
        while(low < high){
            int mid = (low + high + 1) / 2;
            int count = 0;
            for(int i = 0; i < citations.length; i++){
                if(citations[i] >= mid){
                    count++;
                }
            }
            if(count >= mid) low = mid;
            else high = mid - 1;
        }
        return low;
    }
}
