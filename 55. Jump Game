class Solution(object): //Python O(n) time
    def canJump(self, nums):
        goal = len(nums) - 1

        for i in range(len(nums) - 1, -1, -1):
            if i + nums[i] >= goal:
                goal = i
        return True if goal == 0 else False

class Solution { //C++
public:
    bool canJump(vector<int>& nums) {
        int reach = 0;
        int i = 0;
        for (; i < nums.size() && i <= reach; i++){
            reach = max(i + nums[i], reach);
        }
        return i == nums.size();
    }
};

class Solution { //Java
    public boolean canJump(int[] nums) {
        int reachable = 0;
        for(int i = 0; i < nums.length; i++){
            if(i > reachable) return false;
            reachable = Math.max(reachable, i + nums[i]);
        }
        return true;
    }
}
