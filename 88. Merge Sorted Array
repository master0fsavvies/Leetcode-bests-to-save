class Solution { //C++
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
       int i=m-1,j=n-1;
       int right=m+n-1;
       while(i>= 0 && j >= 0){
        if(nums1[i]>nums2[j])
           nums1[right] = nums1[i--];
        else
           nums1[right]=nums2[j--];
        right-- ; 
       }
       while(j >= 0){
        nums1[right--]=nums2[j--];
       }
    }
};
class Solution {//Java
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int i = m-1;
        int j = n-1;
        int k = m+n-1;
        while( i >= 0 && j >=0){
            if(nums1[i] > nums2[j])
                nums1[k] = nums1[i--];
            else
                nums1[k] = nums2[j--];
            k--;
        }
        while (j >= 0){
            nums1[k--] = nums2[j--];
        }
    }
}

class Solution(object): //Python
    def merge(self, nums1, m, nums2, n):
        last1 = m - 1
        last2 = n - 1
        lastFinal = m + n - 1

        while last1 >= 0 and last2 >= 0:
            if nums1[last1] >= nums2[last2]:
                nums1[lastFinal] = nums1[last1]
                last1 -= 1
            else:
                nums1[lastFinal] = nums2[last2]
                last2 -= 1
            lastFinal -= 1
        while last2 >= 0:
            nums1[lastFinal] = nums2[last2]
            lastFinal -= 1

class Solution(object): //Python Fast but small
    def merge(self, nums1, m, nums2, n):
    for j in range(n):
        nums1[m+j] = nums2[j]
    nums1.sort()
        
