class Solution(object): //Python Time: O(n) Space: O(1)
    def jump(self, nums):
        result = 0
        left = 0
        right = 0
        while right < len(nums) - 1:
            farthest = 0
            for i in range (left, right + 1):
                farthest = max(farthest, i + nums[i])
            left = right + 1
            right = farthest
            result += 1
        return result


class Solution { //Java
    public int jump(int[] nums) {
        int result = 0;
        int farthest = 0;
        int end = 0;

        for(int i = 0; i < nums.length; i++){
            farthest = Math.max(farthest, i + nums[i]);
            if(farthest == nums.length - 1){
                result++;
                break;
            }
            if (i == end){
                result++;
                end = farthest;
            }
        }
        return result;
    }
}


class Solution { //C++
public:
    int jump(vector<int>& nums) {
        int result = 0;
        int left = 0;
        int right = 0;
        while(right < nums.size() - 1){
            int farthest = 0;
            for(int i = left; i < right + 1; i++){
                farthest = max(farthest, i + nums[i]);
            }
            left = right + 1;
            right = farthest;
            result += 1;
        }
        return result;
    }
};
