class Solution { // Java
    public int removeDuplicates(int[] nums) {
        int index = 0;
        for(int i = 0; i < nums.length; i++){
            if (index == 0 || nums[index - 1] != nums[i]){
                nums[index] = nums[i];
                index++;
            }
        }
        return index;
    }
}

class Solution(object): // Python
    def removeDuplicates(self, nums):
        index = 0
        for i in range (len(nums)):
            if(i == 0 or nums[i] != nums[index - 1]):
                nums[index] = nums[i]
                index = index + 1
        return index

class Solution { //C++ can offset array by one, otherwise neeed to set a condition for when index is 0
public:
    int removeDuplicates(vector<int>& nums) {
        int leftIndex = 1;
        for(int i = 1; i < nums.size(); i++){
            if(nums[i] != nums[i - 1]){
                nums[leftIndex] = nums[i];
                leftIndex = leftIndex + 1;
            }
        }
        return leftIndex;
    }
};
