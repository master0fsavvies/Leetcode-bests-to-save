class Solution(object): //python - time: O(n) space: O(1)
    def maxProfit(self, prices):
        profit = 0

        for i in range(1, len(prices)):
            if prices[i] > prices[i - 1]:
                profit += (prices[i] - prices[i - 1])
        return profit

class Solution { //Java - diff way
    public int maxProfit(int[] prices) {
        int buyPrice = prices[0];
        int ans = 0;
        for(int i = 1; i < prices.length; i++){
            if (prices[i] < prices[i-1]){
                ans += prices[i - 1] - buyPrice;
                buyPrice = prices[i];
            }
        }
        return ans + prices[prices.length - 1] - buyPrice;
    }
}

class Solution { //C++
public:
    int maxProfit(vector<int>& prices) {
        int profit = 0;
        int buy = prices[0];
        for(int i = 1; i < prices.size(); i++){
            if(buy < prices[i]){
                profit += prices[i] - buy;
            }
            buy = prices[i];
        }
        return profit;
    }
};
