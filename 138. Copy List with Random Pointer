"""
# Definition for a Node.
class Node:
    def __init__(self, x, next=None, random=None):
        self.val = int(x)
        self.next = next
        self.random = random
"""

class Solution(object): //Python
    def copyRandomList(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        oldToCopy = {None : None}
        cur = head
        while cur:
            copy = Node(cur.val)
            oldToCopy[cur] = copy
            cur = cur.next
        
        cur = head
        while cur:
            copy = oldToCopy[cur]
            copy.next = oldToCopy[cur.next]
            copy.random = oldToCopy[cur.random]
            cur = cur.next

        return oldToCopy[head]

/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {//Java
    public Node copyRandomList(Node head) {
        HashMap<Node, Node> oldToCopy = new HashMap<>();

        Node cur = head;
        while(cur != null){
            oldToCopy.put(cur, new Node(cur.val));
            cur = cur.next;
        }

        cur = head;
        while(cur != null){
            oldToCopy.get(cur).next = oldToCopy.get(cur.next);
            oldToCopy.get(cur).random = oldToCopy.get(cur.random);
            cur = cur.next;
        }

        return oldToCopy.get(head);
    }
}

/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {//C++
public:
    Node* copyRandomList(Node* head){

        unordered_map<Node*, Node*> oldToCopy;

        Node* cur = head;
        while(cur){
            oldToCopy[cur] = new Node(cur->val);
            cur = cur->next;
        }

        cur = head;
        while(cur){
            oldToCopy[cur]->next = oldToCopy[cur->next];
            oldToCopy[cur]->random = oldToCopy[cur->random];
            cur = cur->next;
        }

        return oldToCopy[head];
    }
};

/**
 * // Definition for a _Node.
 * function _Node(val, next, random) {
 *    this.val = val;
 *    this.next = next;
 *    this.random = random;
 * };
 */

/**
 * @param {_Node} head
 * @return {_Node}
 */
var copyRandomList = function(head) { //JavaScript
    if(!head) return null;

    const oldToCopy = new Map();

    let cur = head;
    while(cur){
        oldToCopy.set(cur, new Node(cur.val));
        cur = cur.next
    }

    cur = head;
    while(cur){
        oldToCopy.get(cur).next = oldToCopy.get(cur.next) || null;
        oldToCopy.get(cur).random = oldToCopy.get(cur.random) || null;
        cur = cur.next;
    }

    return oldToCopy.get(head);
};
