class Solution { //C++
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if (p == NULL && q == NULL) return true;

        if(p == NULL || q == NULL) return false;

        if(p->val == q->val) return isSameTree(p->left, q->left) && isSameTree(p->right, q->right);

        return false;
    }
};

class Solution { //Java
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(!p && !q) return true;
        if(!p || !q) return false;
        if(p.val == q.val) return isSameTree(p.left, q.left) && isSameTree(p.right, q.right);
        return false;
    }
}

class Solution(object): //python
    def isSameTree(self, p, q):
        """
        :type p: TreeNode
        :type q: TreeNode
        :rtype: bool
        """
        if(not p and not q): 
            return True
        if(not p or not q): 
            return False
        if(p.val is q.val): 
            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
        return False

var isSameTree = function(p, q) { //JavaScript
    if(!q && !p) return true;
    if(!p || !q) return false;
    if(p.val === q.val) return isSameTree(p.right, q.right) && isSameTree(p.left, q.left);
    return false;
};
