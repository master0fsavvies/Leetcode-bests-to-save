class Solution(object): //Python
    def candy(self, ratings):
        arr = [1] * len(ratings)
        for i in range(1, len(ratings)):
            if ratings[i - 1] < ratings[i]:
                arr[i] = arr[i - 1] + 1
        for i in range(len(ratings) - 2, -1, -1):
            if ratings[i] > ratings[i + 1]:
                arr[i] = max(arr[i], arr[i+1] + 1)
        return sum(arr)

class Solution { //Java - One-Pass Greedy
    public int candy(int[] ratings) {
        if(ratings.length == 0){
            return 0;
        }
        int ret = 1;
        int up = 0;
        int down = 0;
        int peak = 0;

        for(int i = 1; i < ratings.length; i++){
            if(ratings[i - 1] < ratings[i]){
                up++;
                down = 0;
                peak = up;
                ret += 1 + up;
            }
            else if (ratings[i - 1] == ratings[i]){
                up = 0;
                down = 0;
                peak = 0;
                ret += 1;
            } else {
                up = 0;
                down++;
                ret += 1 + down - (peak >= down ? 1 : 0);
            }
        } 
        return ret;
    }
}

class Solution { //C++ - two pass
public:
    int candy(vector<int>& ratings) {
        int size = ratings.size();

        vector<int> candies(size, 1);

        for(int i = 1; i < size; i++){
            if(ratings[i - 1] < ratings[i] && candies[i - 1] >= candies[i]){
                candies[i] = candies[i - 1] + 1;
            }
        }
        for(int i = size - 2; i >= 0; i--){
            if(ratings[i + 1] < ratings[i] && candies[i + 1] >= candies[i]){
                candies[i] = candies[i + 1] + 1;
            }
        }
        int total = 0;
        for(int i = 0; i < size; i++){
            total += candies[i];
        }
        return total;
    }
};
