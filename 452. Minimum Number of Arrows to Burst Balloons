class Solution(object): //O(n log n) Python
    def findMinArrowShots(self, points):
        points.sort()
        result = len(points)
        previous = points[0]
        for i in range(1, result):
            current = points[i]
            if current[0] <= previous[1]:
                result -= 1
                previous = [current[0], min(current[1], previous[1])]
            else: previous = current
        return result

class Solution { //C+=
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        sort(points.begin(), points.end());
        int lastPoint = points[0][1];
        int result = 1;
        for(int i = 0; i < points.size(); i++){
            if(points[i][0] > lastPoint){
                result++;
                lastPoint = points[i][1];
            }
            lastPoint = min(points[i][1], lastPoint);
        }
        return result;
    }
};

class Solution { //Java
    public int findMinArrowShots(int[][] points) {
        int result = points.length;
        Arrays.sort(points, (a, b) -> Integer.compare(a[0], b[0]));
        int[] previous = points[0];
        for(int i = 1; i < points.length; i++){
            int[] current = points[i];
            if(current[0] <= previous[1]){
                result--;
                previous[0] = current[0];
                previous[1] = Math.min(previous[1], current[1]);
            }
            else previous = current;
        }
        return result;
    }
}


var findMinArrowShots = function(points) {//JavaScript
    let result = points.length;
    points.sort();
    let previous = points[0];
    for(let i = 1; i < points.length; i++){
        current = points[i];
        if(current[0] <= previous[1]){
            result--;
            previous = [current[0], Math.min(current[1], previous[1])];
        }
        else previous = current;
    }
    return result;
};
